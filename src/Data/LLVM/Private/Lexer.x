{
{-# LANGUAGE RankNTypes, OverloadedStrings #-}
module Data.LLVM.Private.Lexer ( lexer, Token(..) ) where

import Data.Binary.IEEE754
import Data.Monoid
import Data.Text (Text)
import qualified Data.Text as T
}

$digit = 0-9
$hexdigit = [$digit a-f A-F]
$alpha = [a-zA-Z]
$startChar = [$alpha \$ \. \_]
$identChar = [$startChar $digit]
$whitespace = [\ \t\b\n]
-- LLVM String characters are simple - quotes are represented as \22
-- (an ascii escape) so parsing them is simple
$stringChar = [^\"]

@decimal = [$digit]+
@quotedString = \" $stringChar* \"

tokens :-
  "," $whitespace* "!dbg" { simpleTok TDbg }
  -- Identifiers
  "@" $startChar $identChar* { mkGlobalIdent }
  "%" $startChar $identChar* { mkLocalIdent }
  "!" $startChar $identChar* { mkMetadataName }
  -- Unnamed identifiers
  "@" @decimal+ { mkGlobalIdent }
  "%" @decimal+ { mkLocalIdent }
  "!" @decimal+ { mkMetadataName }
  -- Quoted string idents
  "@" @quotedString { mkQGlobalIdent }
  "%" @quotedString { mkQLocalIdent }

  -- Labels
  -- Drop the trailing : char
  $alpha+ ":" { stringTok TLabel T.init }
  -- There is an alternate form that seems to be much more common
  -- in the assembly generated by llvm-dis/opt:
  --
  --  ; <label>:###
  -- That is, a label encoded as a comment
  "; <label>:" @decimal .* { mkAnonLabel }
  -- Normal comment
  ";" .* ;

  -- Standard literals
  "-"? @decimal { mkIntLit }
  "-"? @decimal "." @decimal ("e" [\+\-]? @decimal)? { mkFloatLit }
  "0x"  $hexdigit+ { mkHexFloatLit 2 }
  "0xK" $hexdigit+ { mkHexFloatLit 3 }
  "0xM" $hexdigit+ { mkHexFloatLit 3 }
  "0xL" $hexdigit+ { mkHexFloatLit 3 }
  "c" @quotedString { mkStringConstant }
  "!" @quotedString { mkMetadataString }
  "true"  { simpleTok TTrueLit }
  "false" { simpleTok TFalseLit }
  "null"  { simpleTok TNullLit }
  "undef" { simpleTok TUndefLit }
  "zeroinitializer" { simpleTok TZeroInitializer }
  @quotedString { stringTok TString unquote }


  -- Operator-like things
  ","   { simpleTok TComma }
  "="   { simpleTok TAssign }
  "*"   { simpleTok TStar }
  "("   { simpleTok TLParen }
  ")"   { simpleTok TRParen }
  "["   { simpleTok TLSquare }
  "]"   { simpleTok TRSquare }
  "{"   { simpleTok TLCurl }
  "}"   { simpleTok TRCurl }
  "<"   { simpleTok TLAngle }
  ">"   { simpleTok TRAngle }
  "!"   { simpleTok TBang }
  "x"   { simpleTok TAggLen }
  "to"  { simpleTok TTo }
  "..." { simpleTok TDotDotDot }

  -- Linkage Types
  "private"   { simpleTok TPrivate }
  "linker_private" { simpleTok TLinkerPrivate }
  "linker_private_weak" { simpleTok TLinkerPrivateWeak }
  "linker_private_weak_def_auto" { simpleTok TLinkerPrivateWeakDefAuto }
  "internal"  { simpleTok TInternal }
  "available_externally" { simpleTok TAvailableExternally }
  "linkonce"  { simpleTok TLinkOnce }
  "weak"      { simpleTok TWeak }
  "common"    { simpleTok TCommon }
  "appending" { simpleTok TAppending }
  "extern_weak" { simpleTok TExternWeak }
  "linkonce_odr" { simpleTok TLinkOnceODR }
  "weak_odr"  { simpleTok TWeakODR }
  "dllimport" { simpleTok TDLLImport }
  "dllexport" { simpleTok TDLLExport }

  -- Calling Conventions
  "ccc"    { simpleTok TCCCCC }
  "fastcc" { simpleTok TCCFastCC }
  "coldcc" { simpleTok TCCColdCC }
  "cc 10"  { simpleTok TCCGHC }
  "cc " @decimal { mkNumberedCC }

  -- Visibility styles
  "default"   { simpleTok TVisDefault }
  "hidden"    { simpleTok TVisHidden }
  "protected" { simpleTok TVisProtected }

  -- Parameter Attributes
  "zeroext"   { simpleTok TPAZeroExt }
  "signext"   { simpleTok TPASignExt }
  "inreg"     { simpleTok TPAInReg }
  "byval"     { simpleTok TPAByVal }
  "sret"      { simpleTok TPASRet }
  "noalias"   { simpleTok TPANoAlias }
  "nocapture" { simpleTok TPANoCapture }
  "nest"      { simpleTok TPANest }

  -- Function Attributes
  "alignstack(" @decimal ")" { mkAlignStack }
  "alwaysinline"    { simpleTok TFAAlwaysInline }
  "hotpatch"        { simpleTok TFAHotPatch }
  "inlinehint"      { simpleTok TFAInlineHint }
  "naked"           { simpleTok TFANaked }
  "noimplicitfloat" { simpleTok TFANoImplicitFloat }
  "noinline"        { simpleTok TFANoInline }
  "noredzone"       { simpleTok TFANoRedZone }
  "noreturn"        { simpleTok TFANoReturn }
  "nounwind"        { simpleTok TFANoUnwind }
  "optsize"         { simpleTok TFAOptSize }
  "readnone"        { simpleTok TFAReadNone }
  "readonly"        { simpleTok TFAReadOnly }
  "ssp"             { simpleTok TFASSP }
  "sspreq"          { simpleTok TFASSPReq }

  -- Types
  "i" @decimal { mkIntegralType }
  "float"      { simpleTok TFloatT }
  "double"     { simpleTok TDoubleT }
  "x86_fp80"   { simpleTok TX86_FP80T }
  "fp128"      { simpleTok TFP128T }
  "ppc_fp128"  { simpleTok TPPC_FP128T }
  "x86mmx"     { simpleTok TX86mmxT }
  "void"       { simpleTok TVoidT }
  "metadata"   { simpleTok TMetadataT }
  "opaque"     { simpleTok TOpaqueT }
  "label"      { simpleTok TLabelT }
  "\\" @decimal  { mkTypeUpref }


  -- Keyword-like things
  "addrspace(" @decimal ")" { mkAddrSpace }
  "type"       { simpleTok TType }
  "constant"   { simpleTok TConstant }
  "section"    { simpleTok TSection }
  "align"      { simpleTok TAlign }
  "alignstack" { simpleTok TAlignStack }
  "sideeffect" { simpleTok TSideEffect }
  "alias"      { simpleTok TAlias }
  "declare"    { simpleTok TDeclare }
  "define"     { simpleTok TDefine }
  "gc"         { simpleTok TGC }
  "module"     { simpleTok TModule }
  "asm"        { simpleTok TAsm }
  "target"     { simpleTok TTarget }
  "datalayout" { simpleTok TDataLayout }
  "blockaddress" { simpleTok TBlockAddress }
  "inbounds"   { simpleTok TInbounds }
  "global"     { simpleTok TGlobal }
  "appending"  { simpleTok TAppending }
  "nuw"        { simpleTok TNUW }
  "nsw"        { simpleTok TNSW }
  "exact"      { simpleTok TExact }
  "volatile"   { simpleTok TVolatile }
  "tail"       { simpleTok TTail }
  "triple"     { simpleTok TTriple }
  "external"   { simpleTok TExternal }

  -- Instructions
  "trunc"          { simpleTok TTrunc }
  "zext"           { simpleTok TZext }
  "sext"           { simpleTok TSext }
  "fptrunc"        { simpleTok TFpTrunc }
  "fpext"          { simpleTok TFpExt }
  "fptoui"         { simpleTok TFpToUI }
  "fptosi"         { simpleTok TFpToSI }
  "uitofp"         { simpleTok TUIToFp }
  "sitofp"         { simpleTok TSIToFp }
  "ptrtoint"       { simpleTok TPtrToInt }
  "inttoptr"       { simpleTok TIntToPtr }
  "bitcast"        { simpleTok TBitCast }
  "getelementptr"  { simpleTok TGetElementPtr }
  "select"         { simpleTok TSelect }
  "icmp"           { simpleTok TIcmp }
  "fcmp"           { simpleTok TFcmp }
  "extractelement" { simpleTok TExtractElement }
  "insertelement"  { simpleTok TInsertElement }
  "shufflevector"  { simpleTok TShuffleVector }
  "extractvalue"   { simpleTok TExtractValue }
  "insertvalue"    { simpleTok TInsertValue }
  "call"           { simpleTok TCall }
  "ret"            { simpleTok TRet }
  "br"             { simpleTok TBr }
  "switch"         { simpleTok TSwitch }
  "indirectbr"     { simpleTok TIndirectBr }
  "invoke"         { simpleTok TInvoke }
  "unwind"         { simpleTok TUnwind }
  "unreachable"    { simpleTok TUnreachable }
  "add"            { simpleTok TAdd }
  "fadd"           { simpleTok TFadd }
  "sub"            { simpleTok TSub }
  "fsub"           { simpleTok TFsub }
  "mul"            { simpleTok TMul }
  "fmul"           { simpleTok TFmul }
  "udiv"           { simpleTok TUdiv }
  "sdiv"           { simpleTok TSdiv }
  "fdiv"           { simpleTok TFdiv }
  "urem"           { simpleTok TUrem }
  "srem"           { simpleTok TSrem }
  "frem"           { simpleTok TFrem }
  "shl"            { simpleTok TShl }
  "lshr"           { simpleTok TLshr }
  "ashr"           { simpleTok TAshr }
  "and"            { simpleTok TAnd }
  "or"             { simpleTok TOr }
  "xor"            { simpleTok TXor }
  "alloca"         { simpleTok TAlloca }
  "load"           { simpleTok TLoad }
  "store"          { simpleTok TStore }
  "phi"            { simpleTok TPhi }
  "va_arg"         { simpleTok TVaArg }

-- cmp styles
  "eq"             { simpleTok Teq }
  "ne"             { simpleTok Tne }
  "ugt"            { simpleTok Tugt }
  "uge"            { simpleTok Tuge }
  "ult"            { simpleTok Tult }
  "ule"            { simpleTok Tule }
  "sgt"            { simpleTok Tsgt }
  "sge"            { simpleTok Tsge }
  "slt"            { simpleTok Tslt }
  "sle"            { simpleTok Tsle }
  "oeq"            { simpleTok Toeq }
  "ogt"            { simpleTok Togt }
  "oge"            { simpleTok Toge }
  "olt"            { simpleTok Tolt }
  "ole"            { simpleTok Tole }
  "one"            { simpleTok Tone }
  "ord"            { simpleTok Tord }
  "ueq"            { simpleTok Tueq }
  "une"            { simpleTok Tune }
  "uno"            { simpleTok Tuno }

  $whitespace+ ;

{
data Token = TIntLit AlexPosn Integer
           | TFloatLit AlexPosn Double
           | TStringLit AlexPosn Text
           | TMetadataString AlexPosn Text
           | TTrueLit AlexPosn
           | TFalseLit AlexPosn
           | TNullLit AlexPosn
           | TUndefLit AlexPosn
           | TZeroInitializer AlexPosn
           | TString AlexPosn Text
           | TLabel AlexPosn Text

           -- Operator-like tokens
           | TComma AlexPosn
           | TAssign AlexPosn
           | TStar AlexPosn
           | TLParen AlexPosn
           | TRParen AlexPosn
           | TLSquare AlexPosn
           | TRSquare AlexPosn
           | TLCurl AlexPosn
           | TRCurl AlexPosn
           | TLAngle AlexPosn
           | TRAngle AlexPosn
           | TBang AlexPosn
           | TAggLen AlexPosn
           | TTo AlexPosn
           | TDotDotDot AlexPosn

           -- Identifiers
           | TLocalIdent AlexPosn Text
           | TGlobalIdent AlexPosn Text
           | TMetadataName AlexPosn Text

           -- Linkage Types
           | TPrivate AlexPosn
           | TLinkerPrivate AlexPosn
           | TLinkerPrivateWeak AlexPosn
           | TLinkerPrivateWeakDefAuto AlexPosn
           | TInternal AlexPosn
           | TAvailableExternally AlexPosn
           | TLinkOnce AlexPosn
           | TWeak AlexPosn
           | TCommon AlexPosn
           | TAppending AlexPosn
           | TExternWeak AlexPosn
           | TLinkOnceODR AlexPosn
           | TWeakODR AlexPosn
           | TDLLImport AlexPosn
           | TDLLExport AlexPosn

           -- Calling Conventions
           | TCCCCC AlexPosn
           | TCCFastCC AlexPosn
           | TCCColdCC AlexPosn
           | TCCGHC AlexPosn
           | TCCN AlexPosn Int

           -- Visibility Style
           | TVisDefault AlexPosn
           | TVisHidden AlexPosn
           | TVisProtected AlexPosn

           -- Param Attributes
           | TPAZeroExt AlexPosn
           | TPASignExt AlexPosn
           | TPAInReg AlexPosn
           | TPAByVal AlexPosn
           | TPASRet AlexPosn
           | TPANoAlias AlexPosn
           | TPANoCapture AlexPosn
           | TPANest AlexPosn

           -- Function Attributes
           | TFAAlignStack AlexPosn Int
           | TFAAlwaysInline AlexPosn
           | TFAHotPatch AlexPosn
           | TFAInlineHint AlexPosn
           | TFANaked AlexPosn
           | TFANoImplicitFloat AlexPosn
           | TFANoInline AlexPosn
           | TFANoRedZone AlexPosn
           | TFANoReturn AlexPosn
           | TFANoUnwind AlexPosn
           | TFAOptSize AlexPosn
           | TFAReadNone AlexPosn
           | TFAReadOnly AlexPosn
           | TFASSP AlexPosn
           | TFASSPReq AlexPosn

           -- Types
           | TIntegralT AlexPosn Int -- bitsize
           | TFloatT AlexPosn
           | TDoubleT AlexPosn
           | TX86_FP80T AlexPosn
           | TFP128T AlexPosn
           | TPPC_FP128T AlexPosn
           | TX86mmxT AlexPosn
           | TVoidT AlexPosn
           | TMetadataT AlexPosn
           | TOpaqueT AlexPosn
           | TUprefT AlexPosn Int
           | TLabelT AlexPosn

           -- Keywords
           | TType AlexPosn
           | TAddrspace AlexPosn Int
           | TConstant AlexPosn
           | TSection AlexPosn
           | TAlign AlexPosn
           | TAlignStack AlexPosn
           | TSideEffect AlexPosn
           | TAlias AlexPosn
           | TDeclare AlexPosn
           | TDefine AlexPosn
           | TGC AlexPosn
           | TModule AlexPosn
           | TAsm AlexPosn
           | TTarget AlexPosn
           | TDataLayout AlexPosn
           | TBlockAddress AlexPosn
           | TInbounds AlexPosn
           | TGlobal AlexPosn
           | TTail AlexPosn
           | TTriple AlexPosn
           | TDbg AlexPosn
           | TExternal AlexPosn

           -- Add modifiers
           | TNUW AlexPosn
           | TNSW AlexPosn

           -- Div mods
           | TExact AlexPosn

           -- Load/Store mods
           | TVolatile AlexPosn

           -- Instructions
           | TTrunc AlexPosn
           | TZext AlexPosn
           | TSext AlexPosn
           | TFpTrunc AlexPosn
           | TFpExt AlexPosn
           | TFpToUI AlexPosn
           | TFpToSI AlexPosn
           | TUIToFp AlexPosn
           | TSIToFp AlexPosn
           | TPtrToInt AlexPosn
           | TIntToPtr AlexPosn
           | TBitCast AlexPosn
           | TGetElementPtr AlexPosn
           | TSelect AlexPosn
           | TIcmp AlexPosn
           | TFcmp AlexPosn
           | TExtractElement AlexPosn
           | TInsertElement AlexPosn
           | TShuffleVector AlexPosn
           | TExtractValue AlexPosn
           | TInsertValue AlexPosn
           | TCall AlexPosn
           | TRet AlexPosn
           | TBr AlexPosn
           | TSwitch AlexPosn
           | TIndirectBr AlexPosn
           | TInvoke AlexPosn
           | TUnwind AlexPosn
           | TUnreachable AlexPosn
           | TAdd AlexPosn
           | TFadd AlexPosn
           | TSub AlexPosn
           | TFsub AlexPosn
           | TMul AlexPosn
           | TFmul AlexPosn
           | TUdiv AlexPosn
           | TSdiv AlexPosn
           | TFdiv AlexPosn
           | TUrem AlexPosn
           | TSrem AlexPosn
           | TFrem AlexPosn
           | TShl AlexPosn
           | TLshr AlexPosn
           | TAshr AlexPosn
           | TAnd AlexPosn
           | TOr AlexPosn
           | TXor AlexPosn
           | TAlloca AlexPosn
           | TLoad AlexPosn
           | TStore AlexPosn
           | TPhi AlexPosn
           | TVaArg AlexPosn
           -- cmp styles
           | Teq AlexPosn
           | Tne AlexPosn
           | Tugt AlexPosn
           | Tuge AlexPosn
           | Tult AlexPosn
           | Tule AlexPosn
           | Tsgt AlexPosn
           | Tsge AlexPosn
           | Tslt AlexPosn
           | Tsle AlexPosn
           | Toeq AlexPosn
           | Togt AlexPosn
           | Toge AlexPosn
           | Tolt AlexPosn
           | Tole AlexPosn
           | Tone AlexPosn
           | Tord AlexPosn
           | Tueq AlexPosn
           | Tune AlexPosn
           | Tuno AlexPosn
         deriving (Show)

simpleTok :: (AlexPosn -> Token) -> AlexPosn -> Text -> Token
simpleTok tcons pos _ = tcons pos

stringTok :: (AlexPosn -> Text -> Token) -> (Text -> Text) ->
             AlexPosn -> Text -> Token
stringTok tcons fltr pos s = tcons pos (fltr s)

-- Helpers for constructing identifiers
mkGlobalIdent = stringTok TGlobalIdent stripSigil
mkLocalIdent = stringTok TLocalIdent stripSigil
mkMetadataName = stringTok TMetadataName stripSigil
mkQGlobalIdent = stringTok TGlobalIdent (unquote . stripSigil)
mkQLocalIdent = stringTok TLocalIdent (unquote . stripSigil)
mkQMetadataName = stringTok TMetadataName (unquote . stripSigil)
stripSigil = T.tail
unquote = T.tail . T.init

-- First, drop the comment prefix.  The label name is all of the
-- digits following that.  The rest of the line is garbage.
mkAnonLabel = stringTok TLabel (T.takeWhile isDigit . T.drop 10)
  where isDigit c = c >= '0' && c <= '9'

-- Helpers for the simple literals
mkIntLit pos s = TIntLit pos $ readText s
mkFloatLit pos s = TFloatLit pos $ readText s
-- Drop the first pfxLen characters (0x)
mkHexFloatLit pfxLen pos s = TFloatLit pos $ wordToDouble $ readText s'
  where s' = "0x" `mappend` (T.drop pfxLen s)
-- Strip off the leading c and then unquote
mkStringConstant = stringTok TStringLit (unquote . T.tail)
mkMetadataString = stringTok TMetadataString (unquote . T.tail)

readText :: (Read a) => Text -> a
readText = read . T.unpack

-- Discard "cc "
mkNumberedCC pos s = TCCN pos $ readText $ T.drop 3 s

-- Extract part between parens (TFAAlignStack Int)
mkAlignStack pos s = TFAAlignStack pos $ readText s'
  where s' = T.drop 11 $ T.init s

-- Types
mkTypeUpref pos s = TUprefT pos $ readText $ T.tail s
mkIntegralType pos s = TIntegralT pos $ readText $ T.tail s

mkAddrSpace pos s = TAddrspace pos $ readText s'
  where s' = T.drop 10 $ T.init s

-- Exported interface
lexer = alexScanTokens




-- This is a Text-posn wrapper, derived from posn-bytestring

data AlexPosn = AlexPn !Int !Int !Int
     deriving (Eq, Show)
type AlexInput = (AlexPosn, Char, Text)

alexGetChar :: AlexInput -> Maybe (Char, AlexInput)
-- alexGetChar :: forall t . (t, Text) -> Maybe (Char, (Char, Text))
alexGetChar (p,_,cs) | T.null cs = Nothing
                     | otherwise = let c   = T.head cs
                                       cs' = T.tail cs
                                       p'  = alexMove p c
                                    in p' `seq` cs' `seq` Just (c, (p', c, cs'))
-- Just (T.head cs, (T.head cs, T.tail cs))

alexInputPrevChar :: forall t t1 t2 . (t, t1, t2) -> t1
alexInputPrevChar (_,c,_) = c

alexStartPos :: AlexPosn
alexStartPos = AlexPn 0 1 1

alexMove :: AlexPosn -> Char -> AlexPosn
alexMove (AlexPn a l c) '\t' = AlexPn (a+1) l     (((c+7) `div` 8) * 8 + 1)
alexMove (AlexPn a l c) '\n' = AlexPn (a+1) (l+1) 1
alexMove (AlexPn a l c) _ =    AlexPn (a+1) l     (c+1)

alexScanTokens :: Text -> [Token]
alexScanTokens str = go (alexStartPos, '\n', str)
  where go inp@(pos,_, str) =
          case alexScan inp 0 of
            AlexEOF -> []
            AlexError ((AlexPn _ line col), _, _) -> error $ "lexical error at line " ++ (show line) ++ ", column " ++ (show col)
            AlexSkip inp' _ -> go inp'
            AlexToken inp' len act -> act pos (T.take (fromIntegral len) str) : go inp'


}