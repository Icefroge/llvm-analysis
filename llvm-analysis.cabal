name: llvm-analysis
version: 0.1.0
synopsis: A Haskell library for analyzing LLVM bitcode
license: BSD3
license-file: LICENSE
author: Tristan Ravitch
maintainer: travitch@cs.wisc.edu
category: Development
build-type: Simple
cabal-version: >=1.10
stability: experimental
tested-with: GHC == 7.4.1
extra-source-files: README.md
description: A Haskell library for analyzing LLVM bitcode.  To convert
             bitcode the format used by this library, see the
             llvm-data-interop package.

             This library attempts to provide some basic program analysis
             infrastructure and aims to scale to large bitcode files.

library
  default-language: Haskell2010
  build-depends: base > 3 && < 5, array, bytestring, containers,
                 deepseq, process, filepath, directory, vector >= 0.9,
                 mtl > 2, filemanip >= 0.3.5.2, monad-par >= 0.1,
                 graphviz >= 2999.12.0.3, data-default >= 0.3,
                 hashable >= 1.1.2.0, unordered-containers,
                 loch-th >= 0.2, temporary >= 1.0,
                 lattices, failure >= 0.2, hashtables,
                 data-lens > 2, data-lens-template >= 2.1.3,
                 llvm-base-types, hbgl, boomerang,
                 -- Testing
                 HUnit, test-framework, test-framework-hunit,
                 -- Dealing with C++ names
                 itanium-abi, uniplate == 1.*
  hs-source-dirs: src
  exposed-modules: LLVM.Analysis,
                   LLVM.Analysis.AccessPath,
                   LLVM.Analysis.CDG,
                   LLVM.Analysis.CFG,
                   LLVM.Analysis.CallGraph,
                   LLVM.Analysis.CallGraphSCCTraversal,
                   LLVM.Analysis.ClassHierarchy,
                   LLVM.Analysis.Dataflow,
                   LLVM.Analysis.Dominance,
                   LLVM.Analysis.PointsTo,
                   LLVM.Analysis.PointsTo.AllocatorProfile,
                   LLVM.Analysis.PointsTo.TrivialFunction,
                   LLVM.Analysis.NoReturn,
                   LLVM.Analysis.ScalarEffects,
                   LLVM.Analysis.Types,
                   LLVM.Analysis.Util.Environment,
                   LLVM.Analysis.Util.Names,
                   LLVM.Analysis.Util.Testing

  ghc-options: -Wall -funbox-strict-fields
  ghc-prof-options: -auto-all

test-suite CallGraphTests
  default-language: Haskell2010
  type: exitcode-stdio-1.0
  main-is: CallGraphTest.hs
  hs-source-dirs: tests
  build-depends: llvm-analysis, llvm-data-interop, mtl > 2,
                 base > 3 && < 5, filepath, containers, HUnit, bytestring
  ghc-options: -Wall

test-suite ReturnTests
  default-language: Haskell2010
  type: exitcode-stdio-1.0
  build-depends: base == 4.*, containers, llvm-analysis, filepath, mtl,
                 HUnit, llvm-data-interop
  ghc-options: -Wall -rtsopts
  main-is: ReturnTests.hs
  hs-source-dirs: tests

test-suite AccessPathTests
  default-language: Haskell2010
  type: exitcode-stdio-1.0
  build-depends: base == 4.*, containers, llvm-analysis, filepath,
                 HUnit, llvm-data-interop
  ghc-options: -Wall -rtsopts
  main-is: AccessPathTests.hs
  hs-source-dirs: tests

test-suite ClassHierarchyTests
  default-language: Haskell2010
  type: exitcode-stdio-1.0
  build-depends: base == 4.*, containers, llvm-analysis, filepath,
                 HUnit, llvm-data-interop, uniplate, itanium-abi
  ghc-options: -Wall -rtsopts
  main-is: ClassHierarchyTests.hs
  hs-source-dirs: tests
